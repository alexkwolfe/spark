#!/usr/bin/env node

/*!
 * Sencha Spark
 * Copyright(c) 2010 Sencha Inc.
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var child_process = require('child_process'),
    netBinding = process.binding('net'),
    dirname = require('path').dirname,
    normalizePath = require('path').normalize,
    exists = require('path').existsSync,
    http = require('http'),
    sys = require('sys'),
    fs = require('fs'),
    cwd = process.cwd(),
    net = require('net');

/**
 * Framework version.
 */

var version = '0.2.7';

/**
 * Use child process workers to utilize all cores
 */

var workers;

/**
 * Process comment
 */
var comment; 

/**
 * Verbose output.
 */

var verbose = false;

/**
 * Colored terminal output.
 */

var useColors = true;

/**
 * Environment defaults.
 */
var env = process.sparkEnv = {
    name: process.env.SPARK_ENV || 'development',
    port: 3000,
    host: null
};

/**
 * Available logging levels.
 */
var logLevels = ['error', 'info', 'debug'];


/**
 * Usage documentation.
 */

var usage = ''
    + '[bold]{Usage}: spark [options] [start|stop|restart|interrupt|status]\n'
    + '\n'
    + '[bold]{Commands}:\n'
    + '  start                Start the server (default command)\n'
    + '  stop                 Gracefully stop the server -- waits for current requests to complete (SIGWINCH)\n'
    + '  restart              Gracefully restart the server -- waits for current requests to complete (SIGHUP)\n'
    + '  interrupt            Stop the server -- does not wait for current requests to complete (SIGINT)\n'
    + '  status               Show server and worker status(es)\n'
    + '\n'
    + '[bold]{Options}:\n'
    + '  --comment            Use this to label the process in htop\n'
    + '  -H, --host ADDR      Host address, defaults to INADDR_ANY\n'
    + '  -p, --port NUM       Port number, defaults to 3000\n'
    + '  --ssl-key PATH       SSL key file\n'
    + '  --ssl-crt PATH       SSL certificate file\n'
    + '  -n, --workers NUM    Number of worker processes to spawn\n'
    + '  -I, --include PATH   Unshift the given path to require.paths\n'
    + '  -E, --env NAME       Set environment, defaults to "development"\n'
    + '  -M, --mode NAME      Alias of -E, --env\n'
    + '  -e, --eval CODE      Evaluate the given string\n'
    + '  -C, --chdir PATH     Change to the given path\n'
    + '  -c, --config PATH    Load configuration module\n'
    + '  -u, --user ID|NAME   Change user with setuid()\n'
    + '  -g, --group ID|NAME  Change group with setgid()\n'
    + '  -P, --pidfile PATH   PID file, defaults to pids/spark.pid\n'
    + '  -L, --logfile PATH   The server\'s log file, defaults to logs/{env}.log\n'
    + '      --loglevel LEVEL The log level to use: ' + logLevels.join(', ') + ', defaults to \'debug\' in development mode\n'
    + '  -W, --watchfile PATH Restart when this file is modified; by default all .js files are monitored in development mode\n'
    + '  -v, --verbose        Send spark output, and log statements to stdout\n'
    + '  -V, --version        Output spark version\n'
    + '  -K, --no-color       Suppress colored terminal output\n'
    + '  -h, --help           Outputy help information\n'
    + '  --ENV VAL            Sets the given spark environment variable\n'
    ;

/**
 * Log the given msg to stderr.
 *
 * @param  {String} msg
 */

function log(msg) {
    if (verbose) 
        sys.error('... ' + colorize(msg));
}

/**
 * Colorize the given string when color is enabled,
 * otherwise strip placeholders.
 *
 * @param  {String} str
 * @return {String}
 */

function colorize(str) {
    var colors = useColors
        ? { bold: 1 }
        : {};
    return str.replace(/\[(\w+)\]\{([^}]+)\}/g, function(_, color, str){
        return '\x1B[' + colors[color] + 'm' + str +'\x1B[0m';
    });
}

/**
 * Ad-hoc sync mkdir -p implementation.
 *
 * @param {String} path
 * @param {Number} mode
 */

function mkdirs(path, mode) {
    var segs = path.split('/'),
        mode = mode || 0755;
    if (segs[0]) {
        segs.unshift(process.cwd());
    } else {
        segs[0] = '/';
    }
    for (var i = 0, len = segs.length; i < len; ++i) {
        var dir = segs.slice(0, i + 1).join('/'),
            dir = dir[1] === '/' ? dir.slice(1) : dir;
        try {
            var stat = fs.statSync(dir);
            if (!stat.isDirectory()) {
                throw new Error('Failed to mkdir "' + dir + '"');
            }
        } catch (err) {
            if (err.errno === process.ENOENT) {
                fs.mkdirSync(dir, mode);
            } else {
                throw err;
            }
        }
    }
}

/**
 * Strip ".js" extension from the given path.
 *
 * @param {String} path
 * @return {String}
 */

function modulePath(path){
    return path.replace(/\.js$/, '');
}

/**
 * Exit with the given message.
 *
 * @param  {String} msg
 * @param  {Number} code
 */

function abort(msg, code) {
    sys.error(colorize(msg));
    process.exit(code || 1);
}

/**
 * Load all configuration files
 */
function loadConfigs() {
    if (exists(process.cwd() + '/config.js')) {
        log('using [bold]{single} config mode');
        env.configFiles.forEach(function(file) {
            file = normalizePath(process.cwd() + '/' + file);
            if (exists(file)) {
                log('loading config [bold]{`' + file + "'}");
                loadConfig(file);
            } else {
                log('config not found [bold]{`' + file + "'}");
            }
        });
    } else {
        log('using [bold]{environments} config mode');
        file = process.cwd() + '/config/' + env.name + '.js';
        if (exists(file)) {
            log('loading config [bold]{`' + file + "'}");
            loadConfig(file);
        } else {
            log('config not found [bold]{`' + file + "'}");
        }
    }
}

/**
 * Load the given configuration file.
 *
 * @param  {String} file
 */

function loadConfig(file) {
    var args = [],
        config = require(file);
    for (var key in config) {
        var val = config[key] instanceof Array
                ? config[key]
                : [config[key]];

        // Prefix flag
        var key = '--' + key;

        // Apply flags
        val.forEach(function(val){
            args.push(key);
            if (typeof val !== 'boolean') {
                args.push(val);
            }
        });
    }
    parseArguments(args);
    if (verbose) {
        var c = JSON.parse(JSON.stringify(env)); // ugly deep clone
        delete c.configFiles;
        delete c.appPath;
        delete c.watchfile;
        log('using host [bold]{' + c.host + ':' + c.port + '} in [bold]{' + c.name + '}'); delete c.host; delete c.port; delete c.name; 
        log('using pid dir [bold]{' + dirname(c.pidfile) + '}'); delete c.pidfile
        log('using log file [bold]{' + c.log.file + '} at [bold]{' + c.log.level + '} level'); delete c.log;
        log('other config: ');
        Object.keys(c).forEach(function(key) {
            printPair(key, c[key], 1);
        })
    }
}

function printPair(key, val, level) {
    var msg = '';
    for(var i = 0; i < level; i++) { msg += '  '; }
    msg += '[bold]{' + key + '}: ';
    if (Array.isArray(val)) {
        msg += JSON.stringify(val);
    } else if (typeof val === 'object') {
        log(msg);
        Object.keys(val).forEach(function(k) {
            printPair(k, val[k], level + 1);
        });
    } else {
        msg += val;
        log(msg);
    }
}

/**
 * Require application module at the given path,
 * which must be an instanceof net.Server, otherwise
 * abort.
 *
 * @param  {String} path
 * @return {Server}
 */

function requireApp(path) {
    var app = require(path);
    try {
        if (app instanceof net.Server) {
            return app;
        } else {
            throw new Error('invalid server');
        }
    } catch (err) {
        abort("invalid application.\n"
            + "at: `" + path + "'\n"
            + "must export a , ex: `module.exports = http.createServer(...);'\n");
    }
}

/**
 * Get path to application.
 *
 *  - supports env.appPath
 *  - auto-detects {app,server}.js
 *
 * @return {String}
 */

function getAppPath() {
    var path = (env.appPath || '');
    if (path[0] !== '/') {
        path = process.cwd() + '/' + path;
    }

    // App path not given, try app.js and server.js
    if (!env.appPath) {
        if (exists(path + 'app.js')) {
            log('detected app.js');
            path += 'app';
        } else if (exists(path + 'server.js')) {
            log('detected server.js');
            path += 'server';
        } else {
            abort('app not found, pass a module path, or create {app,server}.js');
        }
    } 

    return path;
}

/**
 * Enable SSL for app if desired
 */

function enableSSL(app, env) {
    if (env.sslKey) {
        var crypto = require('crypto');
        app.setSecure(crypto.createCredentials({
            key: env.sslKey,
            cert: env.sslCrt
        }));
    }
}

function changeUser() {
  // user / group
  if (env.gid) {
      log('group [bold]{' + env.gid + '}');
      process.setgid(env.gid);
  }
  if (env.uid) {
      log('user [bold]{' + env.uid + '}');
      process.setuid(env.uid);
  }
}

/**
 * Each worker processes gets a logger.
 */
function getLogger(cfg) {
    var levels = cfg.levels || logLevels;
    
    var logger = {
        verbose: cfg.verbose,
        logfile: cfg.file, 
        level: cfg.level,
        logstream: function() {
            if (!this.stream || !this.stream.writeable) {
                this.stream = fs.createWriteStream(this.logfile, { 'flags': 'a+',  'encoding': 'utf8' });
            }
            return this.stream;
        },
        format: function(date, level, msg) {
            return this.formatDate(date) + ' [' + level.toUpperCase() + '] ' + msg;
        },
        write: function write(msg, level) {
            if (!msg) return;
            
            // log as info if no level is specified
            level = level || ((msg instanceof Error) ? 'error' : 'info');
            if (logLevels.indexOf(level) == -1)
                level = 'info';

            // include error stack
            if (msg instanceof Error) 
                msg = msg.message + (msg.stack ? '\n' + msg.stack : '');
            
            // if the configured logging level isn't the same or higher
            // than the message being logged, then bail
            if (!(levels.indexOf(this.level) >= levels.indexOf(level)))
                return;
            
            // trim and append newline if necessary
            msg = msg.toString().trim();
            if (!/\n$/.test(msg)) msg += '\n';

            // format the log message
            msg = this.format(this.formatDate(new Date()), level, msg);
            
            var logToFile = 'none' !== this.logfile;            
            
            // output to stdout if no file or if verbose
            if (!logToFile || this.verbose) sys.print(msg);
            
            // output to log file
            if (logToFile) this.logstream().write(msg);
        },
        formatDate: function(date) {
            if (typeof date == 'string') return date;
            var zone = ((date.getTimezoneOffset() / 60) * 100);
            zone = (zone > 0 ? '+' : '-') + zone;
            return date.getFullYear() + '-' +
                    this._zero(date.getMonth()) + '-' +
                    this._zero(date.getDate()) + ' ' + 
                    this._zero(date.getHours()) + ':' + 
                    this._zero(date.getMinutes()) + ':' + 
                    this._zero(date.getSeconds()) + ':' + 
                    date.getMilliseconds() + ' ' +
                    zone;
        },
        _zero: function(i) {
            if (i < 10)
                return '0' + i;
            return i;
        }
    };
    levels.forEach(function(name) {
        logger[name] = function(msg) {
            this.write(msg, name);  
        };
    });
    return logger;
}


/**
 * Start child worker process.
 */

function startWorker() {
    var stdin = new net.Stream(0, 'unix');
    stdin.addListener('data', function(json){
        process.sparkEnv = env = JSON.parse(json.toString());
        env.log = getLogger(env.log);
    });

    stdin.addListener('fd', function(fd){
        var app = requireApp(getAppPath());
        app.addListener('close', function() { 
            try { stdin.destroy(); } catch (err) { sys.error("could not destroy worker stream: " + err); }
        });
        ['SIGWINCH', 'SIGHUP'].forEach(function(signal) {
            process.addListener(signal, function() {
                try { app.close(); } catch (err) { sys.error("could not close http server: " + err); }
            });
        });
        env.log.info('Spark server (' + process.pid + ') listening on '
            + 'http' + (env.sslKey ? 's' : '') + '://'
            + (env.host || '*') + ':' + env.port
            + ' in ' + env.name + ' mode');
        enableSSL(app, env);
        app.listenFD(fd);
    });
    stdin.resume();
}

/**
 * Spawn a worker process
 */
function spawnWorker(fd, i) {
    // Create an unnamed unix socket to pass the fd to the child.
    var fds = netBinding.socketpair();
    
    var args = [__filename, '--child', (i).toString()];
    if (comment)
        args.push('--comment', comment);

    // Spawn the child process
    var child = child_process.spawn(
        process.argv[0],
        args,
        undefined,
        [fds[1], 1, 2]
    );
    log('worker ' + (i + 1) + ' spawned [bold]{' + child.pid + '}');
   
    // For some reason stdin isn't getting set, patch it externally
    if (!child.stdin) {
        child.stdin = new net.Stream(fds[0], 'unix');
    }
    
    child.stdin.write(JSON.stringify(env), 'ascii', fd);
    fs.writeFileSync(workerPidfile(i), child.pid.toString(), 'ascii');

    return child;
}

/**
 * Start the process.
 */

function start() {
    log('starting');

    if (process.version < '0.1.98' && process.version > "0.1.199") {
        abort('Cannot use spark with a version older than v0.1.98');
    }

    // Load config files
    loadConfigs();

    // Application path
    var path = getAppPath();

    var watcher = getFileWatcher();
    watcher.start(function(file) {
        log('changed [bold]{' + file + '}');
        stopProcess(getpid(env.pidfile), 'SIGHUP');
    });

    // Forward signals to child processes, keeps the zombies at bay.
    // Also performs config reload and worker respawing for the SIGHUP signal.
    var children = [];
    var lastSignal = null;
    ['SIGINT', 'SIGHUP', 'SIGTERM', 'SIGWINCH'].forEach(function(signal){
        process.addListener(signal, function() {
            var action;
            switch(signal) {
                case 'SIGHUP': action = 'restarting'; break;
                case 'SIGWINCH': action = 'stopping'; break;
                default: action = 'interrupting';
            }
            log(action + ' due to [bold]{' + signal + '}');
                
            watcher.stop();
            lastSignal = signal;
            
            // reload the app configuration
            if (restarted(lastSignal)) loadConfigs();

            var kills = children.map(function(child, i) {
                return function(done) {
                    if (isRunning(child.pid)) {
                        // the child has not yet exited, so exit and respawn if necessary
                        child.addListener('exit', function(code, signal) { 
                            if (restarted(lastSignal)) children[i] = spawnWorker(fd, i); 
                            done();
                        });
                        try { child.kill(childKillSignal(lastSignal)); } catch (err) { done(); }
                    } else {
                        // the child has already exited, respawn if necessary
                        if (restarted(lastSignal)) children[i] = spawnWorker(fd, i); 
                        done();
                    }
                }
            });

            // kill children one by one
            chain(kills, function() {
                // all children have been handled
                if (restarted(lastSignal)) {
                    log('restarted');
                    watcher.restart();
                } else {
                    log('exited');
                    process.exit();
                }
            });             
        });
    });
    
    // Spawn workers unless process was interrupted
    if (!workers) workers = 1; 

    var afNum = (netBinding.isIP(env.host) == 6) ? 6 : 4;
    var fd = netBinding.socket('tcp' + afNum);
    netBinding.bind(fd, env.port, env.host);
    netBinding.listen(fd, 128);

    changeUser();
    
    for (var i = 0; i < workers && !interrupted(lastSignal); i++) {
        children[i] = spawnWorker(fd, i);
    }
    
    changeUser();
    
    // Write out pid
    fs.writeFileSync(env.pidfile, process.pid.toString(), 'ascii');
}

function childKillSignal(sig) {
    if (sig === 'SIGHUP' && env.name === 'development')
        return 'SIGINT';
    return sig;
}

function interrupted(sig) {
    return sig === 'SIGTERM' || sig === 'SIGINT';
}

function restarted(sig) {
    return sig === 'SIGHUP';
}

/**
 * Chain functions and callback when complete
 */
function chain(fxns, callback) {
    if (fxns.length === 0) return;
    var pos = 0;
    var callNext = function() {
        var done = function(err) {
            pos++;
            if (err instanceof Error) sys.error(err);
            if (fxns.length > pos) { 
                callNext();
            } else {
                callback();
            }
        };
        fxns[pos](done);
    };
    callNext();
}

/**
 * Attempt to stop the given pid.
 *
 * @param {Number} pid
 */

function stopProcess(pid, signal){
    if (pid) {
        signal = signal || 'SIGTERM'
        try {
            process.kill(pid, signal);
            if (signal === 'SIGHUP')
                log('restarted [bold]{' + pid + '}');
            else if (signal === 'SIGWINCH')
                log('stopped [bold]{' + pid + '}');
            else 
                log('interrupted [bold]{' + pid + '}');
        } catch (err) {
            if (err.message === 'No such process') {
                log('process [bold]{' + pid + '} is not running')
            } else {
                throw err;
            }
        }
    }
}

/**
 * Check status of process(es).
 */

function status() {
    checkStatus(getpid(env.pidfile));
    for (var i = 0; i < workers; ++i) {
        checkStatus(getpid(workerPidfile(i)), i);
    }
}

/**
 * Check status of the given pid.
 *
 * @param {Number} pid
 */

function checkStatus(pid, worker){
    if (pid) {
        var pidname = (worker >= 0 ? 'worker ' + (worker + 1) : 'server  ') + ' [bold]{' + pid + '}';
        sys.error('... ' + colorize(pidname + (isRunning(pid) ? ' is ' : ' is not ') + 'running'));
    }
}

function isRunning(pid) {
    if (!pid)
        return false;
    try {
        process.kill(pid, 0);
        return true;
    } catch (err) {
        if (err.message === 'No such process') {
            return false;
        } else {
            throw err;
        }
    }
}

/**
 * Return pid from the given path.
 *
 * @param {String} path
 * @return {Number}
 */

function getpid(path) {
    try {
        return parseInt(fs.readFileSync(path), 10);
    } catch (err) {
        if (err.errno === process.ENOENT) {
            log('[bold]{' + err.path + '} does not exist');
        } else {
            throw err;
        }
    }
}

/**
 * Return worker pidfile for the given index.
 *
 * @param {Number} i
 * @return {String}
 */

function workerPidfile(i){
    return env.pidfile.replace('.pid', '.' + i + '.pid');    
}

/**
 * Build a file system watcher that monitors {env.watchfile} or
 * the {process.cwd} in development mode.
 *
 * @return {Object}
 */
function getFileWatcher() {
    return {
        watching: false,
        lastEvent: 0,
        files: [],
        callback: null,
        start: function(cb) {
            var self = this;
            if (self.watching) throw new Error("Already watching");
            self.watching = true;
            self.callback = cb;
            self.findFiles(function(files) {
                self.files = files;
                log('watching [bold]{' + files.length + ' files}');
                self.files.forEach(function(file) {
                    fs.watchFile(file, {interval : 500}, function(curr, prev) {
                        if (curr.mtime.valueOf() != prev.mtime.valueOf() || curr.ctime.valueOf() != prev.ctime.valueOf()) {
                            var now = new Date();
                            if (now - self.lastEvent > 1000) {
                                self.lastEvent = new Date();
                                cb(file);
                            }
                        }
                    });
                });
            });
        },
        restart: function(cb) {
           this.start(this.callback); 
        },
        stop: function() {
            log('no longer watching [bold]{' + this.files.length + ' files}');
            this.files.forEach(function(f) {
                fs.unwatchFile(f);
            });
            this.files = [];
            this.watching = false;
        },
        findFiles: function(cb) {
            if (env.watchfile) {
                log('watching [bold]{' + env.watchfile + '}');
                cb([env.watchfile]);
            } else if (env.name === 'development'){
                try {
                    log('watching [bold]{' + process.cwd() + '}');
                    child_process.exec('find "' + process.cwd() + '" | grep "\.js$"', function(error, stdout, stderr) {
                        cb(stdout.trim().split("\n"));
                    });
                } catch (e) {
                    sys.error(e);
                    cb([]);
                }
            }   
        }
    }
}



/**
 * Parse the arguments.
 */

function parseArguments(args, cmd) {
    var arg;

    /**
     * Return shifted argument, or
     * abort with the given prefix.
     *
     * @param  {String} prefix
     * @return {String}
     */

    function requireArg(prefix) {
        if (args.length) {
            return args.shift();
        } else {
            abort(prefix + ' requires an argument.');
        }
    }

    env.configFiles = env.configFiles || ['./config.js'];
    
    // used to initialize a logger for each worker
    if (!env.log) {
        env.log = {}
        env.log.verbose = false;
    }

    // Iterate
    while (args.length) {
        switch (arg = args.shift()) {
            case '--comment':
              comment = requireArg('--comment');
              break;
            case '--child':
              env.workerNum = parseInt(requireArg('--child'), 10);
              break;
            case '-h':
            case '--help':
                abort(usage);
                break;
            case '-I':
            case '--include':
                require.paths.unshift(requireArg('--include'));
                break;
            case '-e':
            case '--eval':
                eval(requireArg('--eval'));
                break;
            case '-p':
            case '--port':
                env.port = parseInt(requireArg('--port'), 10);
                break;
            case '-H':
            case '--host':
                env.host = requireArg('--host');
                break;
            case '-u':
            case '--user':
                env.uid = requireArg('--user');
                break;
            case '-g':
            case '--group':
                env.gid = requireArg('--group');
                break;
            case '-C':
            case '--chdir':
                process.chdir(requireArg('--chdir'));
                break;
            case '-E':
            case '--env':
                env.name = requireArg('--env');
                break;
            case '-M':
            case '--mode':
                env.name = requireArg('--mode');
                break;
            case '-c':
            case '--config':
                var path = requireArg('--config');
                env.configFiles.push(path);
                break;
            case '-v':
            case '--verbose':
                verbose = true;
                env.log.verbose = true;
                break;
            case '-V':
            case '--version':
                abort(version);
                break;
            case '-K':
            case '--no-color':
                useColors = false;
                break;
            case '-n':
            case '--workers':
                workers = parseInt(requireArg('--workers'), 10);
                break;
            case '--ssl-key':
                env.sslKey = fs.readFileSync(requireArg('--ssl-key'), 'ascii');
                break;
            case '--ssl-crt':
                env.sslCrt = fs.readFileSync(requireArg('--ssl-crt'), 'ascii');
                break;
            case '-P':
            case '--pidfile':
                env.pidfile = requireArg('--pidfile');
                break;
            case '-L':
            case '--logfile':
                env.log.file = requireArg('--logfile');
                break;
            case '--loglevel':
                env.log.level = requireArg('--loglevel').toLowerCase();
                if (logLevels.indexOf(env.log.level) == -1)
                    abort('--loglevel must be: ' + logLevels.join(', '));
                break;
            case '-W':
            case '--watchfile':
                env.watchfile = requireArg('--watchfile');
                break;
            case 'stop':
            case 'start':
            case 'interrupt':
            case 'restart':
            case 'status':
                cmd = arg;
                break;
            default:
                if (arg[0] === '-') {
                    arg = arg.substr(2);
                    env[arg] = requireArg('--' + arg);
                } else {
                    env.appPath = modulePath(arg);
                }
        }
    }
    
     var appPath = getAppPath();
    
    // Default pid file
    env.pidfile = env.pidfile || './pids/spark.pid';
    
    // Normalize pid file path
    if (env.pidfile[0] !== '/')  // relative path
       env.pidfile = normalizePath(dirname(appPath) + '/' + env.pidfile);  
       
    // Make pid directory
    mkdirs(dirname(env.pidfile));
    
    // Default log file
    env.log.file = env.log.file || './logs/' + env.name + '.log';
      
    // Normalize log file path    
    if (env.log.file[0] !== '/')  // relative path
        env.log.file = normalizePath(dirname(appPath) + '/' + env.log.file);  
        
    // Pass verbose config to logger
    env.log.verbose = verbose;
    
    // Different default logging levels for each environment
    if (!env.log.level) {
        var defaultLevel;
        switch (env.name) {
            case 'production': defaultLevel = 'error'; break;
            case 'development': defaultLevel = 'debug'; break;
            case 'test': defaultLevel = 'debug'; break;
            default: defaultLevel = 'info';
        }
        env.log.level = defaultLevel;
    }
        
    // Make log directory
    mkdirs(dirname(env.log.file));
    
    // Discover the number of workers
    if (cmd && cmd != 'start') {
        var workerPidFiles = fs.readdirSync(dirname(env.pidfile)).map(
            function(f){ return /\d+.pid$/.test(f); }
        );
        workers = workers || Math.max(0, workerPidFiles.length - 1);
    }

    // Run the command
    switch (cmd) {
        case 'start':
            if (env.workerNum >= 0) 
                startWorker();
            else 
                start();
            break;
        case 'stop':
            stopProcess(getpid(env.pidfile), 'SIGWINCH');
            break;
        case 'interrupt':
            stopProcess(getpid(env.pidfile));
            break;
        case 'restart':
            stopProcess(getpid(env.pidfile), 'SIGHUP');
            break;
        case 'status':
            status();
            break;
    }
}

// Parse cli arguments
parseArguments(process.argv.slice(2), 'start');